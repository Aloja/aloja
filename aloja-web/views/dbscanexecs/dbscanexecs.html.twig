{% extends "layout.html.twig" %}

{% block stylesheet %}
    {{ parent() }}
{% endblock %}

{% block javascript %}
    {{ parent() }}
    {{ highcharts_js|raw }}

    <script>
        $(document).ready(function() {

            // Form with all the chart options
            var form = $('form#options');

            // Call updateChart for form events
            form.change(updateChart);
            form.find('button').click(updateChart)
            form.submit(updateChart);

            // Different zoom actions
            $('#zoom_reset').click(function () {
                // Sets the default zoom
                chart.xAxis[0].setExtremes(null, null, false);
                chart.yAxis[0].setExtremes(null, null, false);
                chart.redraw()
            });
            $('#zoom_ratio_11').click(zoomRatio11);
            function zoomRatio11() {
                // Sets a zoom where both axis have the same aspect ratio (1:1)

                // Iterate all series to obtain the minimum bounding box
                // (the min&max values for every serie are already calculated)
                var bbox = {x_min: null, x_max: null, y_min: null, y_max: null};
                for (i = 0; i < chart.series.length; i++) {
                    if (bbox.x_min == null) bbox.x_min = chart.series[i].options.x_min;
                    if (bbox.x_max == null) bbox.x_max = chart.series[i].options.x_max;
                    if (bbox.y_min == null) bbox.y_min = chart.series[i].options.y_min;
                    if (bbox.y_max == null) bbox.y_max = chart.series[i].options.y_max;
                    if (bbox.x_min > chart.series[i].options.x_min) bbox.x_min = chart.series[i].options.x_min;
                    if (bbox.x_max < chart.series[i].options.x_max) bbox.x_max = chart.series[i].options.x_max;
                    if (bbox.y_min > chart.series[i].options.y_min) bbox.y_min = chart.series[i].options.y_min;
                    if (bbox.y_max < chart.series[i].options.y_max) bbox.y_max = chart.series[i].options.y_max;
                }
                bbox.w = bbox.x_max - bbox.x_min;
                bbox.h = bbox.y_max - bbox.y_min;;

                // Calculate the bounding box aspect ratio
                var bbox_ar = (bbox.x_max - bbox.x_min) / (bbox.y_max - bbox.y_min);
                // console.log("bbox_ar", bbox_ar);

                // Calculate the current aspect ratio of the graph
                var x_extremes = chart.xAxis[0].getExtremes();
                var y_extremes = chart.yAxis[0].getExtremes();
                var chart_width = chart.xAxis[0].toPixels(x_extremes.max) - chart.xAxis[0].toPixels(x_extremes.min);
                var chart_height = chart.yAxis[0].toPixels(y_extremes.min) - chart.yAxis[0].toPixels(y_extremes.max);
                var graph_ar = chart_width / chart_height;
                // console.log("graph_ar", graph_ar);

                if (bbox_ar > 1) {
                    // The bounding box is a horizontal rectangle
                    // console.log("The bounding box is a horizontal rectangle");
                    if (bbox_ar > graph_ar) {
                        // The bounding box is "more horizontal" than the viewport
                        // console.log("The bounding box is more horizontal than the viewport");
                        var center = (bbox.y_min + bbox.y_max) / 2;
                        var offset = bbox.w / graph_ar;
                        chart.xAxis[0].setExtremes(bbox.x_min, bbox.x_max, false);
                        chart.yAxis[0].setExtremes(center - offset/2, center + offset/2, false);
                    } else {
                        // The viewport is "more horizontal" than the bounding box
                        // console.log("The viewport is more horizontal than the bounding box");
                        var center = (bbox.x_min + bbox.x_max) / 2;
                        var offset = bbox.h * graph_ar;
                        chart.xAxis[0].setExtremes(center - offset/2, center + offset/2, false);
                        chart.yAxis[0].setExtremes(bbox.y_min, bbox.y_max, false);
                    }
                } else {
                    // The bounding box is a vertical rectangle
                    // console.log("The bounding box is a vertical rectangle");
                    if (bbox_ar < graph_ar) {
                        // The bounding box is "more vertical" than the viewport
                        // console.log("The bounding box is more vertical than the viewport");
                        var center = (bbox.x_min + bbox.x_max) / 2;
                        var offset = bbox.h * graph_ar;
                        chart.xAxis[0].setExtremes(center - offset/2, center + offset/2, false);
                        chart.yAxis[0].setExtremes(bbox.y_min, bbox.y_max, false);
                    } else {
                        // The viewport is "more vertical" than the bounding box
                        // console.log("The viewport is more vertical than the bounding box");
                        var center = (bbox.y_min + bbox.y_max) / 2;
                        var offset = bbox.w / graph_ar;
                        chart.xAxis[0].setExtremes(bbox.x_min, bbox.x_max, false);
                        chart.yAxis[0].setExtremes(center - offset/2, center + offset/2, false);
                    }
                }

                chart.redraw()
            }

            function updateChart(event) {
                // Start loading (only show first time, if not already present)
                if (chart.loadingShown !== true) {
                    chart.showLoading();
                }

                // Load chart options from html form
                var metric_x = form.find("[name='metric_x']");
                var metric_y = form.find("[name='metric_y']");

                // Launch ajax request
                $.ajax({
                    url: "{{ path('dbscanexecsdata', {'jobid': jobid}) }}",
                    data: {
                        metric_x: metric_x.val(),
                        metric_y: metric_y.val(),
                    },
                })
                .done(function(data) {

                    // Update loading dialog
                    chart.showLoading("Loading... <br>(" + data.pending + " remaining)");

                    // Update chart with new options
                    var metric_x_name = metric_x.find("option:selected").text();
                    var metric_y_name = metric_y.find("option:selected").text();
                    chart.xAxis[0].setTitle({text: metric_x_name});
                    chart.yAxis[0].setTitle({text: metric_y_name});

                    // Reset series color and symbol iterator
                    // This way the same cluster will keep it's theme between updates
                    chart.colorCounter = chart.symbolCounter = 0;

                    // Update chart data
                    while(chart.series.length > 0) {
                        chart.series[0].remove(false);
                    }
                    for (i = 0; i < data.seriesData.length; i++) {
                        chart.addSeries({
                            name: "Cluster #" + (i + 1) + " (" + data.seriesData[i].size + ")",
                            data: data.seriesData[i].points,
                            x_min: data.seriesData[i].x_min,
                            x_max: data.seriesData[i].x_max,
                            y_min: data.seriesData[i].y_min,
                            y_max: data.seriesData[i].y_max,
                        }, false);
                    }
                    if (data.noiseData.length > 0) {
                        chart.addSeries({
                            name: "Noise",
                            data: data.noiseData,
                        }, false);
                    }

                    // Reset zoom
                    chart.xAxis[0].setExtremes(null, null, false);
                    chart.yAxis[0].setExtremes(null, null, false);

                    chart.redraw();

                    if (data.pending > 0) {
                        // Fire the AJAX call again
                        updateChart();
                    } else {
                        // Finished loading
                        chart.hideLoading();
                    }
                });

                // Prevent form submit
                if (event && event.type == "submit") {
                    event.preventDefault();
                }
            }

            var chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'chart',
                    type: 'scatter',
                    zoomType: 'xy',
                    resetZoomButton: {
                        theme: {
                            display: 'none',
                        },
                    },
                },
                title: {
                    text: 'DBSCANexecs'
                },
                subtitle: {
                    text: '{{ bench }} (job: {{ job_offset }})'
                },
                xAxis: {
                    title: {
                        text: ""
                    },
                    startOnTick: false,
                    endOnTick: false,
                },
                yAxis: {
                    title: {
                        text: ""
                    },
                    startOnTick: false,
                    endOnTick: false,
                },
                tooltip: {
                    shared: true,
                    useHTML: true,
                    headerFormat: '',
                    pointFormat: '<span style="font-size: 10px">Exec: {point.id_exec}</span><br/><span style="font-size: 10px">{series.name}</span><br/><span style="color:{series.color}">\u25CF</span> {series.xAxis.options.title.text}: <b>{point.x}</b><br/><span style="color:{series.color}">\u25CF</span> {series.yAxis.options.title.text}: <b>{point.y}</b><br/>',
                },
                plotOptions: {
                    series: {
                        animation: false,
                        point: {
                            events: {
                                click: function () {
                                    this.series.chart.xAxis[0].setExtremes(
                                        this.series.options.x_min,
                                        this.series.options.x_max
                                    );
                                    this.series.chart.yAxis[0].setExtremes(
                                        this.series.options.y_min,
                                        this.series.options.y_max
                                    );
                                }
                            },
                        },
                    },
                },
                series: 
                    [
                    ]
            });
            updateChart();
        });
    </script>
{% endblock %}

{% block content %}

    <form role="form" class="form-inline pull-left">
        <button type="button" id="zoom_ratio_11" class="btn btn-default">Zoom 1:1</button>
        <button type="button" id="zoom_reset" class="btn btn-default">Reset Zoom</button>
    </form>

    <form id="options" role="form" class="form-inline pull-right">
        <input type="hidden" name="jobid" value="{{ jobid }}">
        <label>
            Metric X:
            <select name="metric_x" class="form-control">
            {% for current_metric in METRICS %}
                <option value="{{ loop.index0 }}" {% if loop.index0 == 0 %}selected="selected"{% endif %}>{{ current_metric }}</option>
            {% endfor %}
            </select>
        </label>
        <label>
            Metric Y:
            <select name="metric_y" class="form-control">
            {% for current_metric in METRICS %}
                <option value="{{ loop.index0 }}" {% if loop.index0 == 1 %}selected="selected"{% endif %}>{{ current_metric }}</option>
            {% endfor %}
            </select>
        </label>
    </form>
    <div id="chart" style="clear: both;"></div>

{% endblock %}
