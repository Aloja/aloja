{% block stylesheetdatatables %}
	<style type="text/css">
        @import "js/datatables/media/css/demo_table.css";
        @import "js/datatables/media/css/jquery.dataTables.css";
        @import "js/datatables/extras/ColReorder/media/css/ColReorder.css";
        @import "js/datatables/extras/TableTools/media/css/TableTools.css";
        @import "js/datatables/extras/ColVis/media/css/ColVis.css";
        .scrollStyle
        {
            overflow-x:auto;
            width: 100%;
        }
    </style>
{% endblock %}
{% block datatablescontent %}
	<div id="jsonError" class="alert alert-danger" role="alert" style="display: none; text-align: center; font-weight: bold;">
	  <p></p>
	</div>
      Click on a <strong>benchmark name</strong> to see execution details.</br>
      Select different rows and <strong>click compare</strong>, to compare charts.</br>
      <strong>Search</strong> to filter results. Shift+Click to order by multiple columns</br>

      <form action="{{ path('perfcharts') }}" target="_blank" role="form">
          {% set style_table = '' %}
		  {% if message is not defined or message is null %}
			  <div id="loading" style="height: 400px; text-align: center; font-size: 2em;">
	            </br></br></br></br></br></br>
	            Loading data...<br /><br />
	            <img src="img/icon.load.gif" />
	        </div>
	        {% set style_table = 'style="display: none;"' %}
		  {% endif %}
        <table id="benchmarks" cellpadding="0" cellspacing="0" border="0" class="display" width="100%" {{ style_table | raw}}>
 			<thead>
			    <tr>
			      <th></th>
				  {% for key_name,column_name in theaders %}
				   {% autoescape false %}
				   
				    {% if column_name == 'IO SFac' %}
    			      {% set column_name = column_name ~ makeTooltip('The number of streams to merge at once while sorting files. This determines the number of open file handles.') %}
    			    {% elseif column_name == 'IO FBuf' %}
    			      {% set column_name = column_name ~ makeTooltip('The total amount of buffer memory to use while sorting files, in megabytes. By default, gives each merge stream 1MB, which should minimize seeks.') %}
    			    {% elseif column_name == 'Exe Time' %}
    			      {% set column_name = column_name ~ makeTooltip('Execution time.') %}
    			    {% elseif column_name == 'Running Cost $' %}
    			      {% set column_name = column_name ~ makeTooltip('Cost on USD dependant of running time and hardware configuration.') %}
    			    {% elseif column_name == 'Replicas' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of replicas.') %}
    			    {% elseif column_name == 'Maps' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of hadoop mappers used.') %}
    			    {% elseif column_name == 'Disk' %}
    			      {% set column_name = column_name ~ makeTooltip('Kind of disks used.') %}
    			    {% elseif column_name == 'Net' %}
    			      {% set column_name = column_name ~ makeTooltip('Network.') %}
    			    {% elseif column_name == 'Rep' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of replicas.') %}
    			    {% elseif column_name == 'Comp' %}
    			      {% set column_name = column_name ~ makeTooltip('Compression algorithm.') %}
    			    {% elseif column_name == 'Blk size' %}
    			      {% set column_name = column_name ~ makeTooltip('Hadoop HDFS block size.') %}
    			    {% elseif column_name == 'Cluster' %}
    			      {% set column_name = column_name ~ makeTooltip('Kind of cluster.') %}
    			    {% elseif column_name == 'Histogram' %}
    			      {% set column_name = column_name ~ makeTooltip('Look at job\'s and task\'s metrics histograms.') %}
    			    {% elseif column_name == 'CHARTS' %}
    			      {% set column_name = column_name ~ makeTooltip('Look at job\'s and task\'s metrics histograms (H), DBSCAN of all the tasks (DB), and DBSCANexecs of all configs (DBe).') %}
    			    {% elseif column_name == 'Files' %}
    			      {% set column_name = column_name ~ makeTooltip('Download execution files and logs.') %}
    			    {% elseif column_name == 'PARAVER' %}
    			      {% set column_name = column_name ~ makeTooltip('Download files to view execution details with PARAVER analysis tool.') %}
                    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %user}' %}
                      {% set column_name = column_name ~ makeTooltip('Percentage of CPU utilization that occurred while executing at the user level (application).') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %nice}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of CPU utilization that occurred while executing at the user level with nice priority.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %system}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of CPU utilization that occurred while executing at the system level (kernel).') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %iowait}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of time that the CPU or CPUs were idle during which the system had an outstanding disk I/O request.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %steal}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of time that the CPU had something runnable, but the XEN hypervisor chose to run something else instead.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %idle}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of time that the CPU or CPUs were idle and the system did not have an outstanding disk I/O request.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] tps}' %}
    			      {% set column_name = column_name ~ makeTooltip('Indicate the number of transfers per second that were issued to the device. Multiple logical requests can be combined into a single I/O request to the device. A transfer is of indeterminate size.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] rd_sec/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of sectors read from the device. The size of a sector is 512 bytes.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] wr_sec/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of sectors written to the device. The size of a sector is 512 bytes.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] Await}' %}
    			      {% set column_name = column_name ~ makeTooltip('The average time (in milliseconds) for I/O requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %util}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of CPU time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100%.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] svctm}' %}
    			      {% set column_name = column_name ~ makeTooltip('The average service time (in milliseconds) for I/O requests that were issued to the device.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] rq-sz}' %}
    			      {% set column_name = column_name ~ makeTooltip('The average size (in sectors) of the requests that were issued to the device.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] queue sz}' %}
    			      {% set column_name = column_name ~ makeTooltip('The average queue length of the requests that were issued to the device.') %}  
    			     {% elseif column_name == 'DEV' %}
    			      {% set column_name = column_name ~ makeTooltip('Device, ID dependant of the system settings.') %}
    			    {% elseif column_name == 'Interface' %}
    			      {% set column_name = column_name ~ makeTooltip('Name of the network interface for which statistics are reported.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] rxpck/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Total number of packets received per second.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] txpck/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Total number of packets transmitted per second.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] rxkB/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Total number of kilobytes received per second.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] txkB/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Total number of kilobytes transmitted per second.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] rxcmp/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of compressed packets received per second (for cslip etc.).') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] txcmp/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of compressed packets transmitted per second.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] rxmcst/s}' %}
    			      {% set column_name = column_name ~ makeTooltip('Number of multicast packets received per second.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] kbmemfree}' %}
    			      {% set column_name = column_name ~ makeTooltip('Amount of free memory available in kilobytes.') %}  
    			     {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] kbmemused}' %}
    			      {% set column_name = column_name ~ makeTooltip('Amount of used memory in kilobytes. This does not take into account memory used by the kernel itself.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %memused}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of used memory.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] kbbuffers}' %}
    			      {% set column_name = column_name ~ makeTooltip('Amount of memory used as buffers by the kernel in kilobytes.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] kbcached}' %}
    			      {% set column_name = column_name ~ makeTooltip('Amount of memory used to cache data by the kernel in kilobytes.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] kbcommit}' %}
    			      {% set column_name = column_name ~ makeTooltip('Amount of memory in kilobytes needed for current workload. This is an estimate of how much RAM/swap is needed to guarantee that there never is out of memory.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] %commit}' %}
    			      {% set column_name = column_name ~ makeTooltip('Percentage of memory needed for current workload in relation to the total amount of memory (RAM+swap). This number may be greater than 100% because the kernel usually overcommits memory.') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] kbactive}' %}
    			      {% set column_name = column_name ~ makeTooltip('Amount of active memory in kilobytes (memory that has been used more recently and usually not reclaimed unless absolutely necessary).') %}
    			    {% elseif column_name matches '{[Avg|Min|Max|Stdev|Var|Sum] kbinact}' %}
    			      {% set column_name = column_name ~ makeTooltip('Amount of inactive memory in kilobytes (memory which has been less recently used. It is more eligible to be reclaimed for other purposes).') %}
    			    {% endif %}
			       <th>{{ column_name }}</th>
			       {% endautoescape %}
				  {% endfor %}
				</tr>
				<tr>
				   <th><input type="text" value="" class="search_init" style="visibility: hidden;"></th>
				   {% for key_name,column_name in theaders %}
				     {% if discreteOptions[key_name] is defined %}
				     <th><select class="form-control" style="width: auto;">
				         {% for option in discreteOptions[key_name] %}
				       	  <option {% if option == 'All' %}value=""{% else %}value="{{ option }}"{% endif %} {% if loop.index == 0 %}selected="selected"{% endif %}>{{ option }}</option>
				      	 {% endfor %}
				         </select>
				     </th> 
				     {% else%}
				     <th><input type="text" value="filter col" class="search_init form-control" {% if column_name == 'PARAVER' or column_name == 'Files'  %}style="display: none;"{% endif %}></th>
				     {% endif %}
				   {% endfor %}
				</tr>
		  </thead>
        </table>

        <h1 class="compare title">Compare executions:</h1>
        <h2 class="compare body">Select rows by clicking on checkboxes and click: <input type="submit" value="Compare Executions" class="btn btn-success"></h2>

    </form>

    <div style="display: none;">
        <h1 class="compare title">Advanced filtering:</h1>
        <h2 class="compare body">Remove old executions by default, clear to enable all:</h2>
        <table border="0" cellspacing="0" cellpadding="1" style="">
            <tbody>
            <tr>
                <td>Minimum execution date:</td>
                <td><input type="text" id="min" name="min"></td>
            </tr>
            <tr>
                <td>Maximum execution date:</td>
                <td><input type="text" id="max" name="max"></td>
            </tr>
            </tbody>
        </table>
    </div>
    </br></br>
{% endblock %}    
{% block javascriptdatatables %}
        <script type="text/javascript" language="javascript" src="js/datatables/media/js/jquery.dataTables.min.js"></script>
	    <script type="text/javascript" language="javascript" src="js/datatables/extras/FixedHeader/js/FixedHeader.nightly.min.js"></script>
	    <script type="text/javascript" language="javascript" src="js/datatables/extras/ColReorder/media/js/ColReorder.nightly.min.js"></script>
	    <script type="text/javascript" language="javascript" src="js/datatables/extras/TableTools/media/js/TableTools.nightly.min.js"></script>
	    <script type="text/javascript" language="javascript" src="js/datatables/extras/TableTools/media/js/ZeroClipboard.js"></script>
	    <script type="text/javascript" language="javascript" src="js/datatables/extras/ColVis/media/js/ColVis.nightly.min.js"></script>
	    <script type="text/javascript" charset="utf-8">
        //parse querystring        
        $.urlParam = function(name) {
            var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
            if (!results) {
                return "";
            }
            return decodeURIComponent(results[1]) || "";
        }

        /* Custom filtering function which will filter data in column four between two values */
        $.fn.dataTableExt.afnFiltering.push(
            function( oSettings, aData, iDataIndex ) {
                var iMin = document.getElementById('min').value * 1;
                var iMax = document.getElementById('max').value * 1;
                var iVersion = aData[{{ show_in_result | length }}] == "-" ? 0 : aData[{{ show_in_result | length }}]*1;
                if ( iMin == "" && iMax == "" )
                {
                    return true;
                }
                else if ( iMin == "" && iVersion < iMax )
                {
                    return true;
                }
                else if ( iMin < iVersion && "" == iMax )
                {
                    return true;
                }
                else if ( iMin < iVersion && iVersion < iMax )
                {
                    return true;
                }
                return false;
            }
        );

        function fnResetAllFilters() {
            var oSettings = oTable.fnSettings();
            for(iCol = 0; iCol < oSettings.aoPreSearchCols.length; iCol++) {
                oSettings.aoPreSearchCols[ iCol ].sSearch = '';
            }
            oTable.fnDraw();
        }

        {% if selected == 'Hadoop Job Counters' or selected == 'Hadoop 2 Job Counters' %}
            var buildExecParams = new Array();
            var index = 0;
            {% for execP in execsParam %}
              buildExecParams[index] = '{{ execP }}';
              ++index;
            {% endfor %}
        {% endif %}

        //create the table after loading
        $(document).ready(function() {

            var asInitVals = new Array();
            var oTable;

            /* Add the events etc before DataTables hides a column */
            $("thead input").keyup( function () {
                var searchText;
                if(isNumber(this.value))
                    searchText =  "^"+this.value+"$";
                else
                    searchText = this.value;
                
                if(this.value == '') searchText = ' ';
                /* Filter on the column (the index) of this element */
                oTable.fnFilter( searchText, oTable.oApi._fnVisibleToColumnIndex(
                       oTable.fnSettings(), $(this).parent().index() ), true );
            } );

            /*
             * Support functions to provide a little bit of 'user friendlyness' to the textboxes
             */
            $("thead input").each( function (i) {
                this.initVal = this.value;
            } );

            $("thead input").focus( function () {
                if ( $(this).hasClass('search_init') )
                {
                    $(this).removeClass('search_init');
                    this.value = "";
                }
            } );

            $("thead input").blur( function (i) {
                if ( this.value == "" )
                {
                    $(this).addClass('search_init');
                    this.value = this.initVal;
                }
            } );

            $("thead select").change(function() {  
            	oTable.fnFilter( $(this).val(), oTable.oApi._fnVisibleToColumnIndex(
                        oTable.fnSettings(), $(this).parent().index() ) );
            });



            {% if selected == 'Benchmark Executions' %}
	            var queryDict = {}
			    var newQuery = {}
		            location.search.substr(1).split("&").forEach(function(item) {queryDict[item.split("=")[0]] = item.split("=")[1]})
			   
			    for(key in queryDict) {
					newKey = key.replace("%5B","[").replace("%5D","]");
					newQuery[newKey] = queryDict[key];
			    }
			    newQuery['type'] = '{{ type }}';
		 	    queryDict = {}	

		 	    var clustersInfo = {{ clustersInfo | raw }};
		    {% endif %}

		    var type = '{{ type }}';
		    var offset = 0;
		    if(type == 'SUMMARY')
			    offset = -8;
		    else if(type == 'HWCONFIG') {
				offset = -6;
			}

            //$('#dynamic').html( '<table cellpadding="0" cellspacing="0" border="0" class="display" id="hibench"></table>' );
            oTable = $('#benchmarks').dataTable( {
                "oSearch": {"bCaseInsensitive":false, "sSearch": $.urlParam('search')},
                "bDeferRender": true,
//                "bServerSide": true,
                "sAjaxSource": "{% if selected == 'Hadoop Job Counters' %}{{ path('countersdata') }}{% elseif selected == 'Hadoop 2 Job Counters' %}{{ path('hdp2countersdata') }}{% elseif selected == 'Performance Metrics' %}{{ path('metricsdata', {'type': type}) }}{%else %}{{ path('benchdata') }}{% endif %}",
                //Trick to allow ajax cache
                "fnServerData": function ( sSource, aoData, fnCallback, oSettings ) {
                    oSettings.jqXHR = $.ajax( {
                      "dataType": 'json',
                      "type": "GET",
                      "url": sSource,
                      {% if selected == 'Hadoop Job Counters' or selected == 'Hadoop 2 Job Counters' %} 
                      "data": {'execs': buildExecParams, 'type': '{{ type }}'},
                      {% elseif selected == 'Benchmark Executions' %}
                      "data": newQuery,
                      {% endif %}
                      "success": fnCallback
                    } );
                },
                {% if selected == 'Performance Metrics' %}
                "aaSorting": [[ {{ getArrayIndex(theaders,'End time')+1 }}, "desc" ]],
                {% elseif selected == 'Hadoop Job Counters' or selected == 'Hadoop 2 Job Counters' %}
                "aaSorting": [[ 2, "desc" ]],
                {% elseif selected == 'Benchmark Executions' %}
                "aaSorting": [[ 17, "desc" ]],
                {% endif %}
                "iDisplayLength": 10,
                "sDom": 'C<"clear">lfrtip<"clear"><"clear">T', //"sDom": 'C<"clear">lfrtip',
                "oLanguage": {
                    "sSearch": "Filter all columns:",
                    "sProcessing": "Loading..."
                },
                //"bStateSave": true,
                "aoColumnDefs": [
                    {% if selected == 'Benchmark Executions' %}
                      {"bVisible": false, "aTargets": [ 4, 18 + offset - 1] }
                    {% elseif selected == 'Performance Metrics' %}
                      {"bVisible": false, "aTargets": [ 1,{{ getArrayIndex(theaders,'End time')+1 }} ] }
                    {% endif %}
                ],
                "bSortCellsTop": true,
                "oColVis": {
                    "aiExclude": [0],
                    "bRestore": true
                },
                "sPaginationType": "full_numbers",
                "oTableTools": {
                    "sSwfPath": "js/datatables/media/swf/copy_csv_xls_pdf.swf"
                },
                "aLengthMenu": [
                    [10, 25, 50, 100, 200, -1],
                    [10, 25, 50, 100, 200, "All"]
                ],
                "fnInitComplete": function(oSettings, json) {
                    if(json.aaData[0][0] != 'error') {
	                    $('#benchmarks').show();
	                    $('#loading').hide();
	                    $("#benchmarks_filter input").each(function() {
	                        $(this).addClass('form-control');
	                     });
	                    $("select[name=benchmarks_length]").addClass('form-control');
	                    $("#benchmarks_paginate").addClass('pagination');
                    } else {
						$("#jsonError p").text('An error has occurred. No data to display');
						$("#loading").hide();
						$("#jsonError").show();
                    }
                },
                "fnDrawCallback": function( oSettings) {
                    $(".tooltip2").each(function() {
						$(this).tooltip();
                    });
                },
                "fnRowCallback": function( nRow, aData, iDisplayIndex ) {
                    $('td', nRow).each(function(index, value) {
                        //Correction because first row doesn't really exist
                        if(index > 0)
                            index += 1;

                    	var headTitle = $("#benchmarks thead tr:first-child th:nth-child("+index+")").text();
                     {% if selected == 'Hadoop Job Counters' or selected == 'Hadoop 2 Job Counters' %}
                       	if(headTitle == 'JOBID')
        					$(this).html('<a href="{{ path('counters') }}?execs[]=' + aData[0] + '&type=TASKS" target="_blank">' + aData[2] + '</a>');
                        else if(headTitle == 'CHARTS')
                            $(this).html('<a href="{{ path('histogram') }}?id_exec=' + aData[0] + '" target="_blank" title="Histogram">H</a> <a href="{{ path('dbscan') }}?jobid=' + aData[2] + '" target="_blank" title="DBSCAN">DB</a> {% if not PROD %}<a href="{{ path('dbscanexecs') }}?jobid=' + aData[2] + '" target="_blank" title="DBSCANexecs">DBe</a>{% endif %}');
                    	else if(headTitle == '')
                            $(this).html('<input type="checkbox" name="execs[]" value="'+ aData[0] + '">');
                     {% elseif selected == 'Benchmark Executions' %}
                       	if(headTitle == 'Benchmark')
        					$(this).html('<a href="{{ path('perfcharts') }}?execs[]=' + aData[0] + '" target="_blank">' + aData[2] + '</a>');
                    	else if(headTitle == '')
                            $(this).html('<input type="checkbox" name="execs[]" value="'+ aData[0] + '">');
                    	else if(headTitle == 'Net') {
        					var tooltip = '';
        					if(aData[6] == 'ETH')
        						tooltip = 'Ethernet';
        					else if(aData[6] == 'IB')
        						tooltip = 'Infiniband';
        					else
            					tooltip = 'Does not apply';
        					$(this).html(aData[6] + ' <img class="tooltip2" src="img/info_small.png" style="width: 10px; height: 10px; margin-bottom: 1px; margin-left: 2px;" data-toggle="tooltip" data-placement="top" data-title="'+tooltip+'" />');
                       	} else if(headTitle == 'Disk') {
						number = aData[7].substring(2);
        					if(aData[7] == 'HDD')
        						tooltip = 'Hard disk';
        					else if(aData[7] == 'SSD')
        						tooltip = 'Solid-state disk';
        					else if((new RegExp("^RR")).test(aData[7]))
            						tooltip = aData[7].substring(2) + ' remote(s)';
							else if((new RegExp("^RL")).test(aData[7]))
								tooltip = aData[7].substring(2) + ' remote(s) / tmp local';
							else if((new RegExp("^SS")).test(aData[7]))
								tooltip = aData[7].substring(2) + ' SSD drives';
							else if((new RegExp("^HD")).test(aData[7]))
								tooltip = aData[7].substring(2) + ' HDD drives';
							else if((new RegExp("^RS")).test(aData[7]))
                                                                tooltip = aData[7].substring(2) + ' HDFS in remote(s) / tmp to SSD'
        					else
        						tooltip = aData[7].substring(2) + ' HDD drives / tmp to SSD';
        					$(this).html(aData[7] + ' <img class="tooltip2" src="img/info_small.png" style="width: 10px; height: 10px; margin-bottom: 1px; margin-left: 2px;" data-toggle="tooltip" data-placement="top" data-title="'+tooltip+'" />');
//                         } else if(headTitle == 'Files') {
//         					var string = aData[15];
//         					var value = string.substring(0, strpos(aData[15], '/'));
//         					$(this).html('<a href="/jobs/'+value+'" target="_blank">files</a>');
                       	} else if(headTitle == 'Cluster') {
				console.log(aData);
                           	var cluster = clustersInfo[aData[14 + offset]];
                           	var tooltip = Math.floor(cluster.vm_RAM)+' GB RAM,'+cluster.vm_OS+','+cluster.provider+','+cluster.type;
							$(this).html('<a href="{{ path('clusters') }}?cluster_name=' + aData[14 + offset] + '"  target="_blank">'+aData[14 + offset]+' <img class="tooltip2" src="img/info_small.png" style="width: 10px; height: 10px; margin-bottom: 1px; margin-left: 2px;" data-toggle="tooltip" data-placement="top" data-title="'+tooltip+'" />'+'</a>');         
						} else if(headTitle == 'Histogram') {
							if(aData[14 + offset].indexOf("hdi") > -1) {
								$(this).html('<a href="{{ path('histogramhdi') }}?id_exec=' + aData[0] + '"  target="_blank">Histogram</a>');
							} else
								$(this).html('<a href="{{ path('histogram') }}?id_exec=' + aData[0] + '"  target="_blank">Histogram</a>');
                        } else if(headTitle == 'PARAVER') {
        					$(this).html('<a href="{{ path('export2prv') }}?id_exec=' + aData[0] + '"  target="_blank">PRV .ZIP</a>');
                        }
                     {% else %}
                         if(headTitle == 'Benchmark')
         					$(this).html('<a href="{{ path('perfcharts') }}?execs[]=' + aData[0] + '" target="_blank">' + aData[2] + '</a>');
                     	 else if(headTitle == '')
                             $(this).html('<input type="checkbox" name="execs[]" value="'+ aData[0] + '">');
                     	 else if(headTitle == 'Net') {
         					var tooltip = '';
         					if(aData[3] == 'ETH')
         						tooltip = 'Ethernet';
         					else
         						tooltip = 'Infiniband';
         					$(this).html(aData[3] + ' <img class="tooltip2" src="img/info_small.png" style="width: 10px; height: 10px; margin-bottom: 1px; margin-left: 2px;" data-toggle="tooltip" data-placement="top" data-title="'+tooltip+'" />');
         				} else if(headTitle == 'Disk') {
         					if(aData[4] == 'HDD')
         						tooltip = 'Hard disk';
         					else if(aData[4] == 'SSD')
         						tooltip = 'Solid-state disk';
         					else
         						tooltip = aData[4].substring(2) + ' remote(s)';
         					$(this).html(aData[4] + ' <img class="tooltip2" src="img/info_small.png" style="width: 10px; height: 10px; margin-bottom: 1px; margin-left: 2px;" data-toggle="tooltip" data-placement="top" data-title="'+tooltip+'" />');
                        }
                     {% endif %}
                    });
                           
	                return nRow;
                },
            } );

            /* Add event listeners to the two range filtering inputs */
            $('#min').keyup( function() { oTable.fnDraw(); } );
            $('#max').keyup( function() { oTable.fnDraw(); } );

            $(window).bind('resize', function () {
            	oTable.fnAdjustColumnSizing();
            });
            jQuery('.dataTable').wrap('<div class="scrollStyle" />'); 

        } );

    </script>
    {% endblock %}
