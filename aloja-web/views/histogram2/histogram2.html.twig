{% extends "layout.html.twig" %}

{% block stylesheet %}
    {{ parent() }}
{% endblock %}

{% block javascript %}
    {{ parent() }}
    {{ highcharts_js|raw }}

    <script>
        $(document).ready(function() {

            // Form with all the chart options
            var form = $('form#options');

            // Call updateChart for form events
            form.change(updateChart);
            form.find('button').click(updateChart)
            form.submit(updateChart);

            function updateChart(event) {
                // Start loading
                chart.showLoading();

                // Load chart options from html form
                var metric = form.find("[name='metric']");
                var group = form.find("[name='group']");
                var accumulated = form.find("[name='accumulated']").hasClass("active");
                var divided = form.find("[name='divided']").hasClass("active");

                // Workaround
                // When a button toggle event is dispatched, the class
                // "active" is added to the element AFTER the event has
                // finished executing, so the value is toggled manually here
                if ($(this).is("button")) {
                    if ($(this).attr("name") == "accumulated") {
                        accumulated = !accumulated;
                    } else if ($(this).attr("name") == "divided") {
                        divided = !divided;
                    }
                }

                // Accumulated and divided options don't support group
                if (accumulated || divided) {
                    group.val(1);
                    group.prop("disabled", true);
                } else {
                    group.prop("disabled", false);
                }

                // Launch ajax request
                $.ajax({
                    url: "{{ path('histogram2data', {'jobid': jobid}) }}",
                    data: {
                        metric: metric.val(),
                        group: group.val(),
                        accumulated: ((accumulated)?1:0),
                        divided: ((divided)?1:0),
                    },
                })
                .done(function(data) {
                    // Update chart with new options
                    var metric_name = metric.find("option:selected").text();
                    chart.yAxis[0].setTitle({text: metric_name});
                    chart.series[0].update({name: metric_name});

                    // Update chart data
                    chart.series[0].setData(data.seriesData);
                    chart.series[1].setData(data.seriesError);

                    // Finished loading
                    chart.hideLoading();
                });

                // Prevent form submit
                if (event && event.type == "submit") {
                    event.preventDefault();
                }
            }

            var chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'chart',
                    type: 'column'
                },
                title: {
                    text: 'Histogram'
                },
                subtitle: {
                    text: '{{ jobid }}'
                },
                xAxis: {
                    type: 'category',
                    labels: {
                        rotation: -45,
                    }
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: ""
                    }
                },
                tooltip: {
                    shared: true,
                    useHTML: true
                },
                plotOptions: {
                    column: {
                        groupPadding: 0,
                        pointPadding: 0,
                        borderWidth: 0,
                    }
                },
                series: 
                    [
                        {
                            name: "",
                            showInLegend: false,
                            data: [],
                        },
                        {
                            name: "Error",
                            type: 'errorbar',
                            showInLegend: false,
                            color: '#DF5353',
                            stemWidth: 3,
                            whiskerLength: 0,
                            tooltip: {
                                pointFormat: '<span style="color:{series.color}">\u25CF</span> {series.name}: <b>&plusmn;{point.stddev}</b><br/>',
                            },
                            data: [],
                        },
                    ]
            });
            updateChart();
        });
    </script>
{% endblock %}

{% block content %}

    <form id="options" role="form" class="form-inline pull-right">
        <input type="hidden" name="jobid" value="{{ jobid }}">
        <label>
            Metric:
            <select name="metric" class="form-control">
            {% for current_metric in METRICS %}
                <option value="{{ loop.index0 }}">{{ current_metric }}</option>
            {% endfor %}
            </select>
        </label>
        <label>
            Group every:
            <input type="text" name="group" class="form-control" value="1" size="4">
        </label>
        <button type="button" name="accumulated" class="btn btn-default" data-toggle="button">Accumulate metric</button>
        <button type="button" name="divided" class="btn btn-default" data-toggle="button">Divided by duration</button>
    </form>
    <div id="chart" style="clear: both;"></div>

{% endblock %}
