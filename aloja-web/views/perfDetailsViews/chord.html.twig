{% extends "layout.html.twig" %}

{% block stylesheet %}
    {{ parent() }}
{% endblock %}

{% block javascript %} {{ parent() }}

<script type="text/javascript">
	$(document).ready(function() {
		$(function () {

            var obj = {{ exec }};
            for (var i = 0; i < obj.length(); i++) {
                console.log(obj[i]);
            }
            /*//////////////////////////////////////////////////////////
             ////////////////// Set up the Data /////////////////////////
             //////////////////////////////////////////////////////////*/

            NameProvider = ["al-35-00", "al-35-01", "al-35-02", "al-35-03", "al-35-04", "al-35-05", "al-35-06", "al-35-07", "al-35-08"];

            matrix = [
                [4.112231301, 0.0, 13.7829569285, 0.0, 0.0, 0.0, 0.0, 0.0, 5.06061e-05],
                [6.8914784642, 4.1113111894, 0.0001472179, 0.0, 0.0, 6.8915520732, 7.36089e-05, 0.0, 9.59545e-05],
                [6.8914784642, 0.0, 6.1669247218, 0.0, 0.0, 0.0, 6.8914784642, 0.0, 4.99489e-05],
                [0.0002168835, 0.0, 0.0001432745, 2.0554150512, 0.0001472179, 6.96656e-05, 6.96656e-05, 0.0, 0.0],
                [2.0549957432, 0.0001393312, 0.0001393312, 7.36089e-05, 4.1119710409, 6.8915520732, 6.8916177954, 0.0, 0.0],
                [0.0276112359, 0.0276112359, 0.0276112359, 0.0, 0.0277584538, 2.0557528636, 0.0276848449, 0.0, 0.0276112359],
                [0.0138043035, 0.0, 0.0138043035, 13.796761232, 0.0, 0.0138043035, 6.1795880869, 0.0, 0.0138043035],
                [7.36089e-05, 0.0, 0.0, 7.36089e-05, 0.0, 0.0, 7.36089e-05, 0.0, 0.000191909],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
            ];

            /*Sums up to exactly 100*/

            colors = ["#FF0000", "#69B40F", "#FFFF00", "#C8125C", "#008FC8", "#10218B", "orange", "#737373", "#AC33A3"];

            /*Initiate the color scale*/
            fill = d3.scale.ordinal()
                    .domain(d3.range(NameProvider.length))
                    .range(colors);

            /*//////////////////////////////////////////////////////////
             /////////////// Initiate Chord Diagram /////////////////////
             //////////////////////////////////////////////////////////*/

            margin = {top: 30, right: 25, bottom: 20, left: 25},
                    width = 850 - margin.left - margin.right,
                    height = 550 - margin.top - margin.bottom,
                    innerRadius = Math.min(width, height) * .39,
                    outerRadius = innerRadius * 1.04;

            /*Initiate the SVG*/
            svg = d3.select("#chart").append("svg:svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("svg:g")
                    .attr("transform", "translate(" + (margin.left + width / 2) + "," + (margin.top + height / 2) + ")");


            chord = d3.layout.chord()
                    .padding(.04)
                    .sortSubgroups(d3.descending) /*sort the chords inside an arc from high to low*/
                    .sortChords(d3.descending) /*which chord should be shown on top when chords cross. Now the biggest chord is at the bottom*/
                    .matrix(matrix);


            /*//////////////////////////////////////////////////////////
             ////////////////// Draw outer Arcs /////////////////////////
             //////////////////////////////////////////////////////////*/

            arc = d3.svg.arc()
                    .innerRadius(innerRadius)
                    .outerRadius(outerRadius);

            g = svg.selectAll("g.group")
                    .data(chord.groups)
                    .enter().append("svg:g")
                    .attr("class", function (d) {
                        return "group " + NameProvider[d.index];
                    });

            g.append("svg:path")
                    .attr("class", "arc")
                    .style("stroke", function (d) {
                        return fill(d.index);
                    })
                    .style("fill", function (d) {
                        return fill(d.index);
                    })
                    .attr("d", arc)
                    .style("opacity", 0)
                    .transition().duration(1000)
                    .style("opacity", 0.4);

            /*//////////////////////////////////////////////////////////
             ////////////////// Initiate Ticks //////////////////////////
             //////////////////////////////////////////////////////////*/

            ticks = svg.selectAll("g.group").append("svg:g")
                    .attr("class", function (d) {
                        return "ticks " + NameProvider[d.index];
                    })
                    .selectAll("g.ticks")
                    .attr("class", "ticks")
                    .data(groupTicks)
                    .enter().append("svg:g")
                    .attr("transform", function (d) {
                        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
                                + "translate(" + outerRadius + 40 + ",0)";
                    });

            /*Append the tick around the arcs*/
            ticks.append("svg:line")
                    .attr("x1", 1)
                    .attr("y1", 0)
                    .attr("x2", 5)
                    .attr("y2", 0)
                    .attr("class", "ticks")
                    .style("stroke", "#FFF");

            /*Add the labels for the %'s*/
            ticks.append("svg:text")
                    .attr("x", 8)
                    .attr("dy", ".35em")
                    .attr("class", "tickLabels")
                    .attr("transform", function (d) {
                        return d.angle > Math.PI ? "rotate(180)translate(-16)" : null;
                    })
                    .style("text-anchor", function (d) {
                        return d.angle > Math.PI ? "end" : null;
                    })
                    .text(function (d) {
                        return d.label;
                    })
                    .attr('opacity', 0);

            /*//////////////////////////////////////////////////////////
             ////////////////// Initiate Names //////////////////////////
             //////////////////////////////////////////////////////////*/

            g.append("svg:text")
                    .each(function (d) {
                        d.angle = (d.startAngle + d.endAngle) / 2;
                    })
                    .attr("dy", ".35em")
                    .attr("class", "titles")
                    .attr("text-anchor", function (d) {
                        return d.angle > Math.PI ? "end" : null;
                    })
                    .attr("transform", function (d) {
                        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
                                + "translate(" + (innerRadius + 55) + ")"
                                + (d.angle > Math.PI ? "rotate(180)" : "");
                    })
                    .attr('opacity', 0)
                    .text(function (d, i) {
                        return NameProvider[i];
                    });

            /*//////////////////////////////////////////////////////////
             //////////////// Initiate inner chords /////////////////////
             //////////////////////////////////////////////////////////*/

            chords = svg.selectAll("path.chord")
                    .data(chord.chords)
                    .enter().append("svg:path")
                    .attr("class", "chord")
                    .style("stroke", function (d) {
                        return d3.rgb(fill(d.source.index)).darker();
                    })
                    .style("fill", function (d) {
                        return fill(d.source.index);
                    })
                    .attr("d", d3.svg.chord().radius(innerRadius))
                    .attr('opacity', 0);

            /*//////////////////////////////////////////////////////////
             ///////////// Initiate Progress Bar ////////////////////////
             //////////////////////////////////////////////////////////*/
            /*Initiate variables for bar*/
            var progressColor = ["#D1D1D1", "#949494"],
                    progressClass = ["prgsBehind", "prgsFront"],
                    prgsWidth = 0.4 * 650,
                    prgsHeight = 3;
            /*Create SVG to visualize bar in*/
            var progressBar = d3.select("#progress").append("svg")
                    .attr("width", prgsWidth)
                    .attr("height", 3 * prgsHeight);
            /*Create two bars of which one has a width of zero*/
            progressBar.selectAll("rect")
                    .data([prgsWidth, 0])
                    .enter()
                    .append("rect")
                    .attr("class", function (d, i) {
                        return progressClass[i];
                    })
                    .attr("x", 0)
                    .attr("y", 0)
                    .attr("width", function (d) {
                        return d;
                    })
                    .attr("height", prgsHeight)
                    .attr("fill", function (d, i) {
                        return progressColor[i];
                    });

            /*//////////////////////////////////////////////////////////
             /////////// Initiate the Center Texts //////////////////////
             //////////////////////////////////////////////////////////*/
            /*Create wrapper for center text*/
            var textCenter = svg.append("g")
                    .attr("class", "explanationWrapper");

            /*Starting text middle top*/
            middleTextTop = textCenter.append("text")
                    .attr("class", "explanation")
                    .attr("text-anchor", "middle")
                    .attr("x", 0 + "px")
                    .attr("y", -24 * 10 / 2 + "px")
                    .attr("dy", "1em")
                    .attr("opacity", 1)
                    .text("Understanding how a cluster performs when running a Hadoop Workload is not an easy task")
                    .call(wrap, 350);

            /*Starting text middle bottom*/
            middleTextBottom = textCenter.append("text")
                    .attr("class", "explanation")
                    .attr("text-anchor", "middle")
                    .attr("x", 0 + "px")
                    .attr("y", 24 * 3 / 2 + "px")
                    .attr("dy", "1em")
                    .attr('opacity', 1)
                    .text("For that reason the following graph aims to summarize the reading behavior for every node in the cluster")
                    .call(wrap, 350);


            /*//////////////////////////////////////////////////////////
             //////////////// Storyboarding Steps ///////////////////////
             //////////////////////////////////////////////////////////*/

            counter = 1,
                    buttonTexts = ["Continue", "Continue", "Continue", "Continue", "Continue", "Continue", "Continue", "Continue"],
                    opacityValueBase = 0.8,
                    opacityValue = 0.4;

            /*Reload page*/
            d3.select("#reset")
                    .on("click", function (e) {
                        location.reload();
                    });

            /*Skip to final visual right away*/
            d3.select("#skip")
                    .on("click", finalChord);

            /*Order of steps when clicking button*/
            d3.select("#clicker")
                    .on("click", function (e) {

                        if (counter == 1) Draw1();
                        else if (counter == 2) Draw2();
                        else if (counter == 3) Draw3();
                        else if (counter == 4) Draw4();
                        else if (counter == 5) Draw5();
                        else if (counter == 6) Draw6();
                        else if (counter == 7) Draw7();
                        else if (counter == 8) finalChord();

                        counter = counter + 1;
                    });
        });
    });
</script>
{% endblock %}


{% block content %}

    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
        <title>DataNodes communication patterns</title>

        <!-- D3.js -->
        <script src="https://d3js.org/d3.v3.min.js"></script>

        <!-- jQuery -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
        <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
        <!-- Latest compiled and minified JavaScript -->
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>

        <!-- Google Fonts -->
        <link href='https://fonts.googleapis.com/css?family=Oswald:400,300,700' rel='stylesheet' type='text/css'>
        <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>

        <link type="text/css" rel="stylesheet" href="css/chord-style.css"/>


    </head>
    <body>
    <div id="body">


        <div id="cont" class="container-fluid">
            <div class="row text-center">
                <div class="col-lg-12">

                    <div id="chart"></div>

                    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
                    <div id="chart_div"></div>


                    <div id="clickerWrapper">
                        <div id="progress"></div>
                        <div id="clicker">Let's Start</div>
                    </div>
                    <div id="buttonWrapper">
                        <div id="buttonWrapperInner">
                            <div id="skip" class="sideButton">SKIP INTRO</div>
                            <div id="reset" class="sideButton">RESET</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script type="text/javascript" src="js/Chord/helperFunctions.js"></script>
    <script type="text/javascript" src="js/Chord/Draw1.js"></script>
    <script type="text/javascript" src="js/Chord/Draw2.js"></script>
    <script type="text/javascript" src="js/Chord/Draw3.js"></script>
    <script type="text/javascript" src="js/Chord/Draw4.js"></script>
    <script type="text/javascript" src="js/Chord/Draw5.js"></script>
    <script type="text/javascript" src="js/Chord/Draw6.js"></script>
    <script type="text/javascript" src="js/Chord/Draw7.js"></script>
    <script type="text/javascript" src="js/Chord/finalChord.js"></script>
    </body>

{% endblock %}
