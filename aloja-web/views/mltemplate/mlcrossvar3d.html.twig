{% extends "layout.html.twig" %} 
{% block stylesheet %}
    {{ parent() }}
{% endblock %}
{% block content %}
	<div id="jsonError" class="alert alert-danger" role="alert" style="display: none; text-align: center; font-weight: bold;">
		<p></p>
	</div>
	<div id="introduction" style="float: left; width: 100%;">
		<p style="text-align:justify"><b>Variable Crossing</b> against <b>Execution Time</b>: This tool allows to visualize the relation between two variables of our dataset and <i>Execution Time</i>. Select which executions you want as data-set using the filter box at the right, and then select which two variables you want to compare against <i>Execution Time</i>.</p>
		<hr />
	</div>
	<div id="container" style="float: left; width: 68%; margin: 0 auto;">

		<div id="waitdiv" style="float: left; width: 100%;"></div>

		<div class="row panel-group" id="stuffdivs" role="tablist" aria-multiselectable="true">
			<div class="panel-heading" role="tab" id="headingChartDiv">
				<i id="ChartFG" data-toggle="collapse" data-parent="#stuffdivs" href="#chartDivFilter" class="indicator glyphicon glyphicon-chevron-up pull-right"></i>
				<h4 class="panel-title">
					<a data-toggle="collapse" data-parent="#stuffdivs" href="#chartDivFilter" aria-expanded="true" aria-controls="chartDivFilter">
						Variable Crossing in 3D (vs Observed Executions)
					</a>
				</h4>
			</div>
			<div id="chartDivFilter" class="panel-collapse collapse in filtersTab" role="tabpanel" aria-labelledby="headingChartDiv">
				<div class="panel-body">
					<div id="chart" style="float: left; width: 100%; margin: 0 auto; height: 600px;"></div>
				</div>
			</div>

			<div class="panel-heading" role="tab" id="headingModelInfo">
				<i id="ModelInfoFG" data-toggle="collapse" data-parent="#stuffdivs" href="#modelInfoFilter" class="indicator glyphicon glyphicon-chevron-down pull-right collapsed"></i>
				<h4 class="panel-title">
					<a class="collapsed" data-toggle="collapse" data-parent="#stuffdivs" href="#modelInfoFilter" aria-expanded="true" aria-controls="modelInfoFilter">
						Model Information
					</a>
				</h4>
			</div>
			<div id="modelInfoFilter" class="panel-collapse collapse filtersTab" role="tabpanel" aria-labelledby="headingModelInfo">
				<div class="panel-body">
					<p>{{error_stats | raw}}</p>
					<p>
						<ul>
						<li>Instance: {{instance|raw}}</li>
						<li>Model Info: {{model_info|raw}}</li>
						<li>Advanced Filters: {{slice_info|raw}}</li>
						<li>Selected Variables: {{variable1}} - {{variable2}}</li>
						</ul>
					</p>
				</div>
			</div>
		</div>
	</div>
	<div style="float: right; width: 30%;">
	{% include 'common/config_filters.html.twig' %}
	</div>
	<div style="clear: both;"></div>
{% endblock %}
{% block javascript %} {{ parent() }}
	<script src="http://code.highcharts.com/highcharts.js"></script>
	<script src="http://code.highcharts.com/highcharts-3d.js"></script>
	<script src="http://code.highcharts.com/modules/exporting.js"></script>
	<script type="text/javascript" src="js/utils.js"></script>
	<script type="text/javascript">
	$(document).ready(function()
	{
		document.getElementById('submit').id = 'submitForm';

		$('jsonError').innerHTML = "<p>{{message}}</p>";

		if ("{{must_wait}}"== "NO")
		{
			$(function () {

				// Give the points a 3D feel by adding a radial gradient
				Highcharts.getOptions().colors = $.map(Highcharts.getOptions().colors, function (color) {
				return {
				    radialGradient: { cx: 0.4, cy: 0.3, r: 0.5 },
				    stops: [
					[0, color],
					[1, Highcharts.Color(color).brighten(-0.2).get('rgb')]
				    ]
				};
				});

				// Set up the chart
				var chart = new Highcharts.Chart({
				chart: {
				    renderTo: 'chart',
				    margin: 100,
				    type: 'scatter',
				    options3d: {
					enabled: true,
					alpha: 10,
					beta: 30,
					depth: 750,
					viewDistance: 1,
					frame: {
					    bottom: { size: 1, color: 'rgba(0,0,0,0.02)' },
					    back: { size: 1, color: 'rgba(0,0,0,0.04)' },
					    side: { size: 1, color: 'rgba(0,0,0,0.06)' }
					}
				    }
				},
				plotOptions: {
					series: { turboThreshold: 5000 },
					scatter: {
						marker: {
		    		                    radius: 5,
		    		                    states: { hover: { enabled: true, lineColor: 'rgb(100,100,100)' } }
		    		                },
		    		                states: { hover: { marker: { enabled: false } } }
					}
				},
				tooltip: {
					formatter: function(chart) {
						var p = this.point;
						return p.name + '<br />{{variable2}}: ' +  Math.round(p.x) + ', {{variable1}}: ' + Math.round(p.y) + ', exe_time: ' + Math.round(p.z);
					}
    		                },
				title: { text: 'Variable comparison (Now in 3D!)' },
				subtitle: { text: '{{variable1}} vs {{variable2}} vs exe_time' },
				yAxis: {
					max: {{maxy}},
					min: {{miny}},
					gridLineWidth: 1,
					title: { enabled: true, text: '{{variable1}}' },
					categories: {{categories1 | raw}}
				},
				zAxis: {
					max: {{maxz}},
					min: {{minz}},
					gridLineWidth: 1,
					title: { enabled: true, text: 'exe_time' },
					reversed: true
				},
				xAxis: {
					max: {{maxx}},
					min: {{minx}},
					gridLineWidth: 1,
					title: { enabled: true, text: '{{variable2}}' },
					categories: {{categories2 | raw}}
				},
				legend: { enabled: false },
			        series: [ {name: 'Observations (Run Experiments)', data: {{ jsonData | raw }}} ]
				});


				// Add mouse events for rotation
				$(chart.container).bind('mousedown.hc touchstart.hc', function (e) {
					e = chart.pointer.normalize(e);

					var posX = e.pageX,
					    posY = e.pageY,
					    alpha = chart.options.chart.options3d.alpha,
					    beta = chart.options.chart.options3d.beta,
					    newAlpha,
					    newBeta,
					    sensitivity = 5; // lower is more sensitive

					$(document).bind({
					    'mousemove.hc touchdrag.hc': function (e) {
						// Run beta
						newBeta = beta + (posX - e.pageX) / sensitivity;
						newBeta = Math.min(100, Math.max(-100, newBeta));
						chart.options.chart.options3d.beta = newBeta;

						// Run alpha
						newAlpha = alpha + (e.pageY - posY) / sensitivity;
						newAlpha = Math.min(100, Math.max(-100, newAlpha));
						chart.options.chart.options3d.alpha = newAlpha;

						chart.redraw(false);
					    },
					    'mouseup touchend': function () {
						$(document).unbind('.hc');
					    }
					});
				});

			});
		} else {
			$('#waitdiv')[0].innerHTML = "<p style='float: left; width: 100%; margin-top: 50px; vertical-align: middle; text-align: center; font-weight: bold; color: #000; background-color: #80ff80'>Your query is being processed. Please wait<!--<br/>{{instance}}--></p>";

			$('#chartDivFilter').hide(); $('#headingChartDiv').hide();
			$('#modelInfoFilter').show(); $('#headingModelInfo').hide();

			setInterval( function() { window.location.reload(); }, 300000 );
		}
	});
    </script>
{% endblock %}
