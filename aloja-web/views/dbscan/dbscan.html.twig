{% extends "layout.html.twig" %}

{% block stylesheet %}
    {{ parent() }}
{% endblock %}

{% block javascript %}
    {{ parent() }}
    {{ highcharts_js|raw }}

    <script>
        $(document).ready(function() {

            // Form with all the chart options
            var form = $('form#options');

            // Call updateChart for form events
            form.change(updateChart);
            form.find('button').click(updateChart)
            form.submit(updateChart);

            // Different zoom actions
            $('#zoom_reset').click(function () {
                // Sets the default zoom
                chart.xAxis[0].setExtremes(null, null, false);
                chart.yAxis[0].setExtremes(null, null, false);
                chart.redraw()
            });
            $('#zoom_ratio_11').click(zoomRatio11);
            function zoomRatio11() {
                // Sets a zoom where both axis have the same aspect ratio (1:1)

                // Iterate all series to obtain the absolute min&max
                // (the min&max values for every serie are already calculated)
                var absolute_x_min = null;
                var absolute_x_max = null;
                var absolute_y_min = null;
                var absolute_y_max = null;
                for (i = 0; i < chart.series.length; i++) {
                    if (absolute_x_min == null) absolute_x_min = chart.series[i].options.x_min;
                    if (absolute_x_max == null) absolute_x_max = chart.series[i].options.x_max;
                    if (absolute_y_min == null) absolute_y_min = chart.series[i].options.y_min;
                    if (absolute_y_max == null) absolute_y_max = chart.series[i].options.y_max;
                    if (absolute_x_min > chart.series[i].options.x_min) absolute_x_min = chart.series[i].options.x_min;
                    if (absolute_x_max < chart.series[i].options.x_max) absolute_x_max = chart.series[i].options.x_max;
                    if (absolute_y_min > chart.series[i].options.y_min) absolute_y_min = chart.series[i].options.y_min;
                    if (absolute_y_max < chart.series[i].options.y_max) absolute_y_max = chart.series[i].options.y_max;
                }

                // Calculate the current aspect ratio of the graph
                var x_extremes = chart.xAxis[0].getExtremes();
                var y_extremes = chart.yAxis[0].getExtremes();
                var chart_width = chart.xAxis[0].toPixels(x_extremes.max) - chart.xAxis[0].toPixels(x_extremes.min);
                var chart_height = chart.yAxis[0].toPixels(y_extremes.min) - chart.yAxis[0].toPixels(y_extremes.max);
                var aspect_ratio = chart_width / chart_height;

                // Change zoom
                var absolute_min = Math.min(absolute_x_min, absolute_y_min);
                var absolute_max = Math.max(absolute_x_max, absolute_y_max);
                if ((absolute_x_max - absolute_x_min) > (absolute_y_max - absolute_y_min)) {
                    // Points form a horizontal rectangle
                    chart.xAxis[0].setExtremes(absolute_min, absolute_max, false);
                    chart.yAxis[0].setExtremes(absolute_min, absolute_max / aspect_ratio, false);
                } else if ((absolute_x_max - absolute_x_min) < (absolute_y_max - absolute_y_min)) {
                    // Points form a vertical rectangle
                    chart.xAxis[0].setExtremes(absolute_min, absolute_max * aspect_ratio, false);
                    chart.yAxis[0].setExtremes(absolute_min, absolute_max, false);
                } else {
                    // Points form a square
                    if (aspect_ratio > 1) {
                        // Viewport is a horizontal rectangle
                        // Expand the X axis
                        chart.xAxis[0].setExtremes(absolute_min, absolute_max * aspect_ratio, false);
                        chart.yAxis[0].setExtremes(absolute_min, absolute_max, false);
                    } else {
                        // Viewport is a vertical rectangle
                        // Expand the Y axis
                        chart.xAxis[0].setExtremes(absolute_min, absolute_max, false);
                        chart.yAxis[0].setExtremes(absolute_min, absolute_max / aspect_ratio, false);
                    }
                }
                chart.redraw()
            }

            function updateChart(event) {
                // Start loading
                chart.showLoading();

                // Load chart options from html form
                var metric_x = form.find("[name='metric_x']");
                var metric_y = form.find("[name='metric_y']");
                var heuristic = form.find("[name='heuristic']").hasClass("active");
                var eps = form.find("[name='eps']");
                var minPoints = form.find("[name='minPoints']");

                // Workaround
                // When a button toggle event is dispatched, the class
                // "active" is added to the element AFTER the event has
                // finished executing, so the value is toggled manually here
                if ($(this).is("button")) {
                    if ($(this).attr("name") == "heuristic") {
                        heuristic = !heuristic;
                    }
                }

                // Launch ajax request
                $.ajax({
                    url: "{{ path('dbscandata', {'jobid': jobid}) }}",
                    data: {
                        metric_x: metric_x.val(),
                        metric_y: metric_y.val(),
                        heuristic: ((heuristic)?1:0),
                        eps: eps.val(),
                        minPoints: minPoints.val(),
                    },
                })
                .done(function(data) {
                    // Update chart with new options
                    var metric_x_name = metric_x.find("option:selected").text();
                    var metric_y_name = metric_y.find("option:selected").text();
                    chart.xAxis[0].setTitle({text: metric_x_name});
                    chart.yAxis[0].setTitle({text: metric_y_name});

                    // Check heuristic usage
                    if (data.heuristic) {
                        // Disable controls
                        eps.prop("disabled", true);
                        minPoints.prop("disabled", true);
                    } else {
                        // Enable controls
                        eps.prop("disabled", false);
                        minPoints.prop("disabled", false);
                    }
                    // Show used values in the form
                    eps.val(data.eps);
                    minPoints.val(data.minPoints);

                    // Reset series color and symbol iterator
                    // This way the same cluster will keep it's theme between updates
                    chart.colorCounter = chart.symbolCounter = 0;

                    // Update chart data
                    while(chart.series.length > 0) {
                        chart.series[0].remove(false);
                    }
                    for (i = 0; i < data.seriesData.length; i++) {
                        chart.addSeries({
                            name: "Cluster #" + (i + 1) + " (" + data.seriesData[i].size + ")",
                            data: data.seriesData[i].points,
                            x_min: data.seriesData[i].x_min,
                            x_max: data.seriesData[i].x_max,
                            y_min: data.seriesData[i].y_min,
                            y_max: data.seriesData[i].y_max,
                        }, false);
                    }
                    if (data.noiseData.length > 0) {
                        chart.addSeries({
                            name: "Noise",
                            data: data.noiseData,
                        }, false);
                    }

                    // Reset zoom
                    chart.xAxis[0].setExtremes(null, null, false);
                    chart.yAxis[0].setExtremes(null, null, false);

                    chart.redraw();

                    // Finished loading
                    chart.hideLoading();
                });

                // Prevent form submit
                if (event && event.type == "submit") {
                    event.preventDefault();
                }
            }

            var chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'chart',
                    type: 'scatter',
                    zoomType: 'xy',
                    resetZoomButton: {
                        theme: {
                            display: 'none',
                        },
                    },
                },
                title: {
                    text: 'DBSCAN'
                },
                subtitle: {
                    text: '{{ jobid }}'
                },
                xAxis: {
                    title: {
                        text: ""
                    },
                    startOnTick: false,
                    endOnTick: false,
                },
                yAxis: {
                    title: {
                        text: ""
                    },
                    startOnTick: false,
                    endOnTick: false,
                },
                tooltip: {
                    shared: true,
                    useHTML: true,
                    headerFormat: '',
                    pointFormat: '<span style="font-size: 10px">{point.task_id}</span><br/><span style="font-size: 10px">{series.name}</span><br/><span style="color:{series.color}">\u25CF</span> {series.xAxis.options.title.text}: <b>{point.x}</b><br/><span style="color:{series.color}">\u25CF</span> {series.yAxis.options.title.text}: <b>{point.y}</b><br/>',
                },
                plotOptions: {
                    series: {
                        animation: false,
                        point: {
                            events: {
                                click: function () {
                                    this.series.chart.xAxis[0].setExtremes(
                                        this.series.options.x_min,
                                        this.series.options.x_max
                                    );
                                    this.series.chart.yAxis[0].setExtremes(
                                        this.series.options.y_min,
                                        this.series.options.y_max
                                    );
                                }
                            },
                        },
                    },
                },
                series: 
                    [
                    ]
            });
            updateChart();
        });
    </script>
{% endblock %}

{% block content %}

    <form role="form" class="form-inline pull-left">
        <button type="button" id="zoom_ratio_11" class="btn btn-default">Zoom 1:1</button>
        <button type="button" id="zoom_reset" class="btn btn-default">Reset Zoom</button>
    </form>

    <form id="options" role="form" class="form-inline pull-right">
        <input type="hidden" name="jobid" value="{{ jobid }}">
        <label>
            Metric X:
            <select name="metric_x" class="form-control">
            {% for current_metric in METRICS %}
                <option value="{{ loop.index0 }}" {% if loop.index0 == 0 %}selected="selected"{% endif %}>{{ current_metric }}</option>
            {% endfor %}
            </select>
        </label>
        <label>
            Metric Y:
            <select name="metric_y" class="form-control">
            {% for current_metric in METRICS %}
                <option value="{{ loop.index0 }}" {% if loop.index0 == 1 %}selected="selected"{% endif %}>{{ current_metric }}</option>
            {% endfor %}
            </select>
        </label>
        <button type="button" name="heuristic" class="btn btn-default active" data-toggle="button">Heuristic</button>
        <label>
            Eps:
            <input type="text" name="eps" class="form-control" size="10" disabled>
        </label>
        <label>
            MinPoints:
            <input type="text" name="minPoints" class="form-control" size="3" disabled>
        </label>
    </form>
    <div id="chart" style="clear: both;"></div>

{% endblock %}
